package main

/*
 * We need at least a basic backend to serve both our
 * single page (SPA) and data files/CSS/images/etc.
 *
 * We'll later extend this to build our authentication.
 *
 * For now, the configuration (config.json) is somewhat
 * clumsily generated by bin/mkconfigjs.sh.
 */

import (
	"net/http"
	"log"
	"strings"
	"path/filepath"
	"html/template"
	"io"
	"encoding/json"
	"os"
)

type Config struct {
	Version string `json:"version"`
	Root    string `json:"root"`
}

var C Config
var configFn = "config.json"

var indexPageTmpl = template.Must(template.New("").Parse(""+
`<!DOCTYPE html>
<html>
	<head>
		<!-- Google tag (gtag.js) -->
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-CR2JJD19S0"></script>
		<script>
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());
			gtag('config', 'G-CR2JJD19S0');
		</script>

		<title>Zhongmu</title>

		<meta charset="utf-8" />

		<link type="text/css" rel="stylesheet" href="{{ .root }}/zm.css?v={{ .version }}"   />
		<link type="text/css" rel="stylesheet" href="{{ .root }}/show.css?v={{ .version }}" />

		<script src="{{ .root }}/pako.min.js?v={{ .version }}"></script>
		<script src="{{ .root }}/require.min.js?v={{ .version }}"></script>
		<script src="{{ .root }}/full.js?v={{ .version }}"></script>

		<meta name="description" content="Chinese character deep recursive inspection" />
		<meta name="robots" content="index, archive" />
		<meta name="keywords" content="Chinese language, character decomposition, San Bai Qian">
		<meta name="author" content="Mathieu Bivert" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	</head>
	<body>
		<div id="loading"><span id="loading-wheel"></span></div>

		<div id="content">
			<div id="header">
				<div id="menu">
					<ul>
						<li><a href="{{ .root }}/index.html">üè†</a></li>
						<li><a href="{{ .root }}/books.html">Books</a></li>
						<li><a href="{{ .root }}/help.html">Help</a></li>
						<li><a href="{{ .root }}/about.html">About</a></li>
					</ul>
				</div>
				<div id="important">
					You may want to
					<a href="https://organharvestinvestigation.net/">document</a>
					yourself about human rights in China.
				</div>
			</div>
			<script>window.addEventListener('load', function() {
				SPA.init(window.location.pathname);
			});</script>
			<div id="main"></div>
			<div id="footer">
				<p>
					¬© Last update: 2024-07-11 - WIP -
					<a href="https://github.com/mbivert/zm/">code</a> -
					<a href="https://github.com/mbivert/zm-data/">data</a>;
					optimized for desktop</p>
			</div>
		</div>
	</body>
</html>
`));

func init() {
	data, err := os.ReadFile(configFn)
	if err != nil {
		log.Fatal("Cannot read '"+configFn+"': ", err)
	}

	if err := json.Unmarshal(data, &C); err != nil {
		log.Fatal("Error while parsing '"+configFn+"': ", err)
	}
}

func main() {
	// TODO: cli parameters
	port  := ":8001"
	dir   := "./site-ready/"

	// Won't change
	var s strings.Builder
	indexPageTmpl.Execute(&s, map[string]any{
		"root"    : C.Root,
		"version" : C.Version,
	})

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if strings.HasSuffix(r.URL.Path, ".html") {
			// Should barely ever happen
			if _, err := io.WriteString(w, s.String()); err != nil {
				log.Println(err)
			}
		} else {
			http.ServeFile(w, r, filepath.Join(dir, filepath.Clean(r.URL.Path)))
		}
	})

	log.Println("Listening on "+port)
	log.Fatal(http.ListenAndServe(port, nil))
}
