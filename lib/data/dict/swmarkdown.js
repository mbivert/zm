var SWMarkdown = (function() {
/*
 * Code to parse the Shuowen Jiezi as a markdown file to
 * a dictionary.
 *
 * The markdown file is generated by
 *	- '../book/wikisource.js:/function parse\('
 *	- '../book/wikisource.js:/function tweakshuowen\('
 *
 * from a wikisource text export, and is both used as a book,
 * and as a dictionary.
 */

/**
 * Parse a markdown version of the Shuo Wen, skipping useless lines.
 *
 * TODO: rename CEDict type.
 *
 * TODO: perhaps we'd better be generating proper file
 * in ../../../mkshuowen.js instead of this.
 *
 * TODO: better tests?
 *
 * @type{Parser<Dict>}
 */
function parse(s) {
	var [cs, e] = Markdown.parse(s);
	if (e) return [{}, e];

	var stop = false;
	return cs.reduce(
		/**
		 * @param{[Dict, ParseError]} acc
		 * @param{Chunk}                        c
		 * @param{number}                       n
		 * @returns{[Dict, ParseError]}
		 */
		function(acc, c, n) {
			// Last section (post/pre face, nothing more to read)
			if (c.t == ChunkType.Section)
			if (c.v == "卷十五 說文解字敘（序）")
				stop = true;

			if (stop || c.t != ChunkType.Paragraph) return acc;

			var es = c.v.split("\n");
			for (var i = 0; i < es.length; i++) {
				// NOTE: not ASCII :
				var x = es[i].indexOf("：")
				if (x == -1) {
					stop = true;
					return [{}, [n, "Invalid dict entry format, no '：' : '"+es[i]+"'"]];
				}

				var e = es[i].slice(0, x);
				var d = es[i].slice(x+1);
				acc[0][e]        = {};
				acc[0][e]["xx5"] = [{ ds : [d] }];
			}

			return acc;
		}, [{}, undefined]);
}

return {
	"parse" : parse,
};

})();
